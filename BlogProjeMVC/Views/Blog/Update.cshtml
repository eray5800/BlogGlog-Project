@using DAL.Models.DTO.BlogDTO;
@model BlogDTO

@{
    ViewData["Title"] = "Update Blog Post";
}

<div class="container mt-5 mb-3">
    <h2 class="mb-4">@ViewData["Title"]</h2>
    <div asp-validation-summary="All" class="text-danger"></div>
    <form asp-action="Update" asp-controller="Blog" method="post" enctype="multipart/form-data" onsubmit="return submitForm()">
        <input type="hidden" asp-for="BlogID" />
        <div class="mb-3">
            <label asp-for="BlogTitle" class="form-label"></label>
            <input asp-for="BlogTitle" class="form-control" />
        </div>
        <div class="mb-3">
            <label asp-for="BlogTags" class="form-label">Tags (separate with commas)</label>
            <input asp-for="BlogTags" class="form-control" placeholder="Enter tags separated by commas" />
            <div class="form-text">Please enter tags separated by commas.</div>
        </div>
        <div class="mb-3">
            <label asp-for="Content" class="form-label">Content</label>
            <div id="editor-container" style="height: 300px;"></div>
            <textarea id="Content" name="Content" asp-for="Content" style="display:none;"></textarea>
        </div>
        <div class="mb-3">
            <label asp-for="SelectedCategoryId" class="form-label">Category</label>
            <select asp-for="SelectedCategoryId" asp-items="@(new SelectList(ViewBag.Categories, "CategoryID", "CategoryName"))" class="form-select">
                <option value="">Select a category</option>
            </select>
        </div>
        <div class="mb-3">
            <label asp-for="IsActive" class="form-label">Active</label>
            <input asp-for="IsActive" type="checkbox" class="form-check-input" />
            <div class="form-text">Check to make the blog active.</div>
        </div>

        <div class="mb-3">
            <label class="form-label">Image</label>
            <input type="file" multiple accept=".jpg, .jpeg, .png,.gif" name="imageFiles" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">Update</button>
    </form>
</div>

@section Styles {
    <!-- Include Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Patrick+Hand&family=Dancing+Script&family=Arial&family=Courier+New&family=Times+New+Roman&display=swap" rel="stylesheet">

    <!-- Include Quill's CSS from CDN -->
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/quill-emoji@latest/dist/quill-emoji.css" rel="stylesheet">

    <link href="~/css/quillextra.css" rel="stylesheet" />
}

@section Scripts {
    <!-- Include Quill's JavaScript from CDN -->
    <script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>
    <!-- Include quill-emoji library from CDN -->
    <script src="https://cdn.jsdelivr.net/npm/quill-emoji@latest/dist/quill-emoji.js"></script>

    <!-- Initialize Quill editor -->
    <script>
        // Define fonts
        var fonts = ['Arial', 'Courier New', 'Times New Roman'];

        // Generate code friendly names
        function getFontName(font) {
            return font.toLowerCase().replace(/\s/g, "-");
        }
        var fontNames = fonts.map(font => getFontName(font));

        // Add fonts to whitelist
        var Font = Quill.import('formats/font');
        Font.whitelist = fontNames;
        Quill.register(Font, true);

        var quill = new Quill('#editor-container', {
            theme: 'snow',
            modules: {
                toolbar: {
                    container: [
                        [{ 'font': fontNames }],  // Custom font options
                        [{ 'header': [1, 2, false] }],
                        ['bold', 'italic', 'underline'],
                        [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                        [{ 'script': 'sub' }, { 'script': 'super' }],
                        [{ 'align': [] }],  // Text alignment options
                        ['link', 'emoji'],  // Link and emoji
                        [{ 'color': [] }, { 'background': [] }],  // Color and background color
                        ['code-block'],  // Code block
                        ['clean']           // Remove formatting button
                    ]
                },
                'emoji-toolbar': true,
                'emoji-textarea': false,
                'emoji-shortname': true
            },
            formats: [
                'font', 'header', 'bold', 'italic', 'underline', 'list', 'bullet', 'script', 'align', 'link', 'emoji', 'color', 'background', 'code-block'
            ]
        });

        // Set Quill editor content from hidden textarea
        document.addEventListener('DOMContentLoaded', function () {
            var content = document.querySelector('textarea[name="Content"]').value;
            quill.root.innerHTML = content;
        });

        // Function to copy Quill content to hidden textarea
        function submitForm() {
            var content = quill.root.innerHTML;
            document.querySelector('textarea[name="Content"]').value = content;
            return true; // Continue with form submission
        }
    </script>
}
